name: CI

permissions: {}

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: Re-enable Windows once #8 is resolved
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta, nightly]
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'

    - name: Run clippy
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable'

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests (release mode)
      run: cargo test --release --verbose

  build:
    name: Build
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # TODO: Re-enable Windows once #8 is resolved
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          strip target/${{ matrix.target }}/release/hfscanner
        else
          strip target/${{ matrix.target }}/release/hfscanner
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: hfscanner-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/hfscanner
          target/${{ matrix.target }}/release/hfscanner.exe

  integration-test:
    name: Integration Tests
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Download Linux binary
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: hfscanner-x86_64-unknown-linux-gnu
        path: ./

    - name: Make binary executable
      run: chmod +x ./hfscanner

    - name: Test with example files
      run: |
        ./hfscanner examples --summary
        ./hfscanner examples --detailed
        ./hfscanner examples --csv test_output.csv

    - name: Verify CSV output
      run: |
        if [ ! -f test_output.csv ]; then
          echo "CSV file not created!"
          exit 1
        fi
        echo "CSV Contents:"
        cat test_output.csv

        # Check for expected entries
        grep -q "unsafe_only.py,0,0,7" test_output.csv || exit 1
        grep -q "safe_only.py,8,0,0" test_output.csv || exit 1
        grep -q "partially_safe_only.py,0,7,0" test_output.csv || exit 1
        echo "All expected entries found in CSV!"

  security-audit:
    name: Security Audit
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit
